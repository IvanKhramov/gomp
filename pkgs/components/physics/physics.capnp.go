// Code generated by capnpc-go. DO NOT EDIT.

package physics

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type PhysicsState capnp.Struct

// PhysicsState_TypeID is the unique identifier for the type PhysicsState.
const PhysicsState_TypeID = 0xf28c7a9b2464feae

func NewPhysicsState(s *capnp.Segment) (PhysicsState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return PhysicsState(st), err
}

func NewRootPhysicsState(s *capnp.Segment) (PhysicsState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return PhysicsState(st), err
}

func ReadRootPhysicsState(msg *capnp.Message) (PhysicsState, error) {
	root, err := msg.Root()
	return PhysicsState(root.Struct()), err
}

func (s PhysicsState) String() string {
	str, _ := text.Marshal(0xf28c7a9b2464feae, capnp.Struct(s))
	return str
}

func (s PhysicsState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PhysicsState) DecodeFromPtr(p capnp.Ptr) PhysicsState {
	return PhysicsState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PhysicsState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PhysicsState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PhysicsState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PhysicsState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PhysicsState) X() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s PhysicsState) SetX(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s PhysicsState) Y() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s PhysicsState) SetY(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// PhysicsState_List is a list of PhysicsState.
type PhysicsState_List = capnp.StructList[PhysicsState]

// NewPhysicsState creates a new list of PhysicsState.
func NewPhysicsState_List(s *capnp.Segment, sz int32) (PhysicsState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[PhysicsState](l), err
}

// PhysicsState_Future is a wrapper for a PhysicsState promised by a client call.
type PhysicsState_Future struct{ *capnp.Future }

func (f PhysicsState_Future) Struct() (PhysicsState, error) {
	p, err := f.Future.Ptr()
	return PhysicsState(p.Struct()), err
}

const schema_a61827898c3c5ebe = "x\xda\x12Hq`1\xe4\xdd\xcf\xc8\xc0\x14(\xc2\xca" +
	"\xf6\x7f\xdd\xbf\x14\x95\xd9U=\x9f\x18\x02\xd5\x18\x19\xff" +
	"\xef\x8b\xb3\xe9\xe9T\x97X\xc6\xc0\xc2\xce\xc0`xt" +
	"\x16\xa3\xe0]v\x06\x06\xc1\x9b\xe5\x0c\xba\xff\x0b\xb2\xd3" +
	"\x8b\xf5\x93\xf3sY\x0b\xf2\xf3R\xf3J\x8a\xf5\x0b2" +
	"*\x8b3\x93\xe1\xb4^rbA^\x81U\x00\x84\x17" +
	"\\\x92\xc8\\\x92\x1a\xc0\xc8\x18\xc8\xc1\xcc\xc2\xc0\xc0\xc2" +
	"\xc8\xc0 \xa8)\xc4\xc0\x10\xa8\xc2\xcc\x18h\xc0\xc4(" +
	"\xc8\xc8(\xc2\x08\x12\xd4\x05\x09j03\x06\x9a01" +
	"2V0\xb2001\xb2002V\xc2X\x80\x00" +
	"\x00\x00\xff\xff6\xe8*V"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_a61827898c3c5ebe,
		Nodes: []uint64{
			0xf28c7a9b2464feae,
		},
		Compressed: true,
	})
}
