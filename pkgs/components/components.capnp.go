// Code generated by capnpc-go. DO NOT EDIT.

package components

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	physics "gomp_game/pkgs/components/physics"
	strconv "strconv"
)

type ComponentState capnp.Struct
type ComponentState_state ComponentState
type ComponentState_state_Which uint16

const (
	ComponentState_state_Which_none    ComponentState_state_Which = 0
	ComponentState_state_Which_physics ComponentState_state_Which = 1
)

func (w ComponentState_state_Which) String() string {
	const s = "nonephysics"
	switch w {
	case ComponentState_state_Which_none:
		return s[0:4]
	case ComponentState_state_Which_physics:
		return s[4:11]

	}
	return "ComponentState_state_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// ComponentState_TypeID is the unique identifier for the type ComponentState.
const ComponentState_TypeID = 0xeee349dc4dec0484

func NewComponentState(s *capnp.Segment) (ComponentState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ComponentState(st), err
}

func NewRootComponentState(s *capnp.Segment) (ComponentState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ComponentState(st), err
}

func ReadRootComponentState(msg *capnp.Message) (ComponentState, error) {
	root, err := msg.Root()
	return ComponentState(root.Struct()), err
}

func (s ComponentState) String() string {
	str, _ := text.Marshal(0xeee349dc4dec0484, capnp.Struct(s))
	return str
}

func (s ComponentState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ComponentState) DecodeFromPtr(p capnp.Ptr) ComponentState {
	return ComponentState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ComponentState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ComponentState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ComponentState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ComponentState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ComponentState) State() ComponentState_state { return ComponentState_state(s) }

func (s ComponentState_state) Which() ComponentState_state_Which {
	return ComponentState_state_Which(capnp.Struct(s).Uint16(0))
}
func (s ComponentState_state) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ComponentState_state) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ComponentState_state) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ComponentState_state) SetNone() {
	capnp.Struct(s).SetUint16(0, 0)

}

func (s ComponentState_state) Physics() (physics.PhysicsState, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != physics")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return physics.PhysicsState(p.Struct()), err
}

func (s ComponentState_state) HasPhysics() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s ComponentState_state) SetPhysics(v physics.PhysicsState) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPhysics sets the physics field to a newly
// allocated physics.PhysicsState struct, preferring placement in s's segment.
func (s ComponentState_state) NewPhysics() (physics.PhysicsState, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := physics.NewPhysicsState(capnp.Struct(s).Segment())
	if err != nil {
		return physics.PhysicsState{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// ComponentState_List is a list of ComponentState.
type ComponentState_List = capnp.StructList[ComponentState]

// NewComponentState creates a new list of ComponentState.
func NewComponentState_List(s *capnp.Segment, sz int32) (ComponentState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[ComponentState](l), err
}

// ComponentState_Future is a wrapper for a ComponentState promised by a client call.
type ComponentState_Future struct{ *capnp.Future }

func (f ComponentState_Future) Struct() (ComponentState, error) {
	p, err := f.Future.Ptr()
	return ComponentState(p.Struct()), err
}
func (p ComponentState_Future) State() ComponentState_state_Future {
	return ComponentState_state_Future{p.Future}
}

// ComponentState_state_Future is a wrapper for a ComponentState_state promised by a client call.
type ComponentState_state_Future struct{ *capnp.Future }

func (f ComponentState_state_Future) Struct() (ComponentState_state, error) {
	p, err := f.Future.Ptr()
	return ComponentState_state(p.Struct()), err
}
func (p ComponentState_state_Future) Physics() physics.PhysicsState_Future {
	return physics.PhysicsState_Future{Future: p.Future.Field(0, nil)}
}

type ComponentsStates capnp.Struct

// ComponentsStates_TypeID is the unique identifier for the type ComponentsStates.
const ComponentsStates_TypeID = 0xbd683e3ea5341be6

func NewComponentsStates(s *capnp.Segment) (ComponentsStates, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ComponentsStates(st), err
}

func NewRootComponentsStates(s *capnp.Segment) (ComponentsStates, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ComponentsStates(st), err
}

func ReadRootComponentsStates(msg *capnp.Message) (ComponentsStates, error) {
	root, err := msg.Root()
	return ComponentsStates(root.Struct()), err
}

func (s ComponentsStates) String() string {
	str, _ := text.Marshal(0xbd683e3ea5341be6, capnp.Struct(s))
	return str
}

func (s ComponentsStates) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ComponentsStates) DecodeFromPtr(p capnp.Ptr) ComponentsStates {
	return ComponentsStates(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ComponentsStates) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ComponentsStates) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ComponentsStates) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ComponentsStates) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ComponentsStates) States() (ComponentState_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ComponentState_List(p.List()), err
}

func (s ComponentsStates) HasStates() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ComponentsStates) SetStates(v ComponentState_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewStates sets the states field to a newly
// allocated ComponentState_List, preferring placement in s's segment.
func (s ComponentsStates) NewStates(n int32) (ComponentState_List, error) {
	l, err := NewComponentState_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return ComponentState_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// ComponentsStates_List is a list of ComponentsStates.
type ComponentsStates_List = capnp.StructList[ComponentsStates]

// NewComponentsStates creates a new list of ComponentsStates.
func NewComponentsStates_List(s *capnp.Segment, sz int32) (ComponentsStates_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ComponentsStates](l), err
}

// ComponentsStates_Future is a wrapper for a ComponentsStates promised by a client call.
type ComponentsStates_Future struct{ *capnp.Future }

func (f ComponentsStates_Future) Struct() (ComponentsStates, error) {
	p, err := f.Future.Ptr()
	return ComponentsStates(p.Struct()), err
}

const schema_abb220532a204a11 = "x\xda\x9c\x91\xbfJ\xc3`\x14\xc5\xcf\xf9\x92\xfe\x19\x8c" +
	"&\xc4I\x87\xb6\x10A\x0b\xd6j\xeb`\x87V\xec\xa4" +
	" \xf4\xa3\xf8\x00\xb5\x16+b\x1aHEt\x11\xc4E" +
	"\xb4\x8b\xab\xb3\x93\xe0\xd0MDpu\xf2\x01t\x13\x9c" +
	"\xc4\xc1\x07\xe8'\x89R\x0bN\xba\x1d\xce\xbd\x9c\xf3\xbb" +
	"\\\xf3vQ\x9f5\x12\x1a\x84t\"Q\xf5:\x9e\xbf" +
	",\x16\x9bw\xb0RT\xd6J2]Mv\xaf\x10a" +
	"\x0c\xc8\xed\xf2\x9cv'\x90\xf6\x09K\xa0Z\x1f;\xbd" +
	"\x7fr:\x8f\x90YR\x1d\xebo\xab\xcf\xcb/\xefX" +
	"c\x8c\x02\xc8\xdd\xb0K\xd0~\xe0\x1e\x06\xa62\xc5_" +
	"\xc9\x13\xe2\x88\xf6\x82\x08\x92\xe7E\x09e\xe5mo\xfa" +
	"3\xf5\xd6N\xc4k\xb9\x0d\xb7\x1d\xeao\x99\xa9\xd7<" +
	"\xd7+\x94\xfbF\xb5]k7\xe8WH\xa9k:\xa0" +
	"\x13\xb0\x8c\x02 \xe3\x1a\xa5#X\xf2\x83\x0d\x9f\xc3`" +
	"E#\xcd\x1f\x1600\xff\xd2\x16\x96e\x12a\xa2\x8c" +
	"k\xfa\x90Ra\xdfT\x1a\x90\x8eF\x99\x154\xd8S" +
	"\xa3\x0c\xdc\xe9%@Nj\x94y\xc1\x11\xb7\xe56\x10" +
	"=\xf4\x9a\xfb\xfeV\xdd\xa7\xa9\xae{\x1b\xce\xc5\xc1\xd9" +
	"G\x80a\xfe\x03\x03\xfd\x939\xf0\x0b\xcb\x98\x83\xf8\x02" +
	"\xfc\x0c\x00\x00\xff\xff\xad\x19\x8b\xfb"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_abb220532a204a11,
		Nodes: []uint64{
			0xbd683e3ea5341be6,
			0xcf8d24dbc08b1a62,
			0xeee349dc4dec0484,
		},
		Compressed: true,
	})
}
